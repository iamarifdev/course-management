// <auto-generated />
using System;
using CourseManagement.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CourseManagement.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250323005407_AddStudentCourseClass")]
    partial class AddStudentCourseClass
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseManagement.Domain.Classes.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_classes");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_classes_staff_id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_classes_title")
                        .HasFilter("\"is_deleted\" = false");

                    b.ToTable("classes", "public");
                });

            modelBuilder.Entity("CourseManagement.Domain.CourseClasses.CourseClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_course_classes");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_course_classes_class_id");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_course_classes_staff_id");

                    b.HasIndex("CourseId", "ClassId")
                        .IsUnique()
                        .HasDatabaseName("ix_course_classes_course_id_class_id")
                        .HasFilter("\"is_deleted\" = false");

                    b.ToTable("course_classes", "public");
                });

            modelBuilder.Entity("CourseManagement.Domain.Courses.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_courses_staff_id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_courses_title")
                        .HasFilter("\"is_deleted\" = false");

                    b.ToTable("courses", "public");
                });

            modelBuilder.Entity("CourseManagement.Domain.Staffs.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("department");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_staffs");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_staffs_staff_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_staffs_user_id")
                        .HasFilter("\"is_deleted\" = false");

                    b.ToTable("staffs", "public");
                });

            modelBuilder.Entity("CourseManagement.Domain.StudentCourseClasses.StudentCourseClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_student_course_classes");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_student_course_classes_class_id");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_student_course_classes_staff_id");

                    b.HasIndex("StudentId", "CourseId", "ClassId")
                        .IsUnique()
                        .HasDatabaseName("ix_student_course_classes_student_id_course_id_class_id")
                        .HasFilter("\"is_deleted\" = false");

                    b.ToTable("student_course_classes", "public");
                });

            modelBuilder.Entity("CourseManagement.Domain.StudentCourses.StudentCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_student_courses");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_student_courses_course_id");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_student_courses_staff_id");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique()
                        .HasDatabaseName("ix_student_courses_student_id_course_id")
                        .HasFilter("\"is_deleted\" = false");

                    b.ToTable("student_courses", "public");
                });

            modelBuilder.Entity("CourseManagement.Domain.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_students_staff_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_students_user_id")
                        .HasFilter("\"is_deleted\" = false");

                    b.ToTable("students", "public");
                });

            modelBuilder.Entity("CourseManagement.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email")
                        .HasFilter("\"is_deleted\" = false");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("CourseManagement.Domain.Classes.Class", b =>
                {
                    b.HasOne("CourseManagement.Domain.Staffs.Staff", "CreatedBy")
                        .WithMany("Classes")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classes_staffs_staff_id");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("CourseManagement.Domain.CourseClasses.CourseClass", b =>
                {
                    b.HasOne("CourseManagement.Domain.Classes.Class", "Class")
                        .WithMany("CourseClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_classes_classes_class_id");

                    b.HasOne("CourseManagement.Domain.Courses.Course", "Course")
                        .WithMany("CourseClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_classes_courses_course_id");

                    b.HasOne("CourseManagement.Domain.Staffs.Staff", "CreatedBy")
                        .WithMany("CourseClasses")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_classes_staffs_staff_id");

                    b.Navigation("Class");

                    b.Navigation("Course");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("CourseManagement.Domain.Courses.Course", b =>
                {
                    b.HasOne("CourseManagement.Domain.Staffs.Staff", "CreatedBy")
                        .WithMany("Courses")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses_staffs_staff_id");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("CourseManagement.Domain.Staffs.Staff", b =>
                {
                    b.HasOne("CourseManagement.Domain.Staffs.Staff", "AddedBy")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .HasConstraintName("fk_staffs_staffs_staff_id");

                    b.HasOne("CourseManagement.Domain.Users.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("CourseManagement.Domain.Staffs.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_staffs_users_user_id");

                    b.Navigation("AddedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseManagement.Domain.StudentCourseClasses.StudentCourseClass", b =>
                {
                    b.HasOne("CourseManagement.Domain.Classes.Class", "Class")
                        .WithMany("EnrolledStudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_course_classes_classes_class_id");

                    b.HasOne("CourseManagement.Domain.Courses.Course", "Course")
                        .WithMany("EnrolledStudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_course_classes_courses_class_id");

                    b.HasOne("CourseManagement.Domain.Staffs.Staff", "EnrolledBy")
                        .WithMany("EnrolledStudentClasses")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_course_classes_staffs_staff_id");

                    b.HasOne("CourseManagement.Domain.Students.Student", "Student")
                        .WithMany("EnrolledClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_course_classes_students_student_id");

                    b.Navigation("Class");

                    b.Navigation("Course");

                    b.Navigation("EnrolledBy");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseManagement.Domain.StudentCourses.StudentCourse", b =>
                {
                    b.HasOne("CourseManagement.Domain.Courses.Course", "Course")
                        .WithMany("EnrolledStudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_courses_courses_course_id");

                    b.HasOne("CourseManagement.Domain.Staffs.Staff", "EnrolledBy")
                        .WithMany("EnrolledStudentCourses")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_courses_staffs_staff_id");

                    b.HasOne("CourseManagement.Domain.Students.Student", "Student")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_courses_students_student_id");

                    b.Navigation("Course");

                    b.Navigation("EnrolledBy");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseManagement.Domain.Students.Student", b =>
                {
                    b.HasOne("CourseManagement.Domain.Staffs.Staff", "AddedBy")
                        .WithMany("Students")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_staffs_staff_id");

                    b.HasOne("CourseManagement.Domain.Users.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("CourseManagement.Domain.Students.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_users_user_id");

                    b.Navigation("AddedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseManagement.Domain.Classes.Class", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("EnrolledStudentClasses");
                });

            modelBuilder.Entity("CourseManagement.Domain.Courses.Course", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("EnrolledStudentClasses");

                    b.Navigation("EnrolledStudentCourses");
                });

            modelBuilder.Entity("CourseManagement.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("CourseClasses");

                    b.Navigation("Courses");

                    b.Navigation("EnrolledStudentClasses");

                    b.Navigation("EnrolledStudentCourses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("CourseManagement.Domain.Students.Student", b =>
                {
                    b.Navigation("EnrolledClasses");

                    b.Navigation("EnrolledCourses");
                });

            modelBuilder.Entity("CourseManagement.Domain.Users.User", b =>
                {
                    b.Navigation("Staff");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
